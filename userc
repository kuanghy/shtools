#########################################################################
#     Filename @  .userc
#       Author @  Huoty
#  Create date @  2015-06-02 21:09:01
#  Description @  Bash user configuration
#########################################################################


#### 终端命令提示符样式
SCHEME1="\[\033[01;35m\]\u\[\033[01;31m\]\$\[\033[01;36m\][\W]\[\033[01;32m\] >>\[\033[00m\] "
SCHEME2="\[\033[01;32m\]\u\[\033[01;31m\]\$\[\033[01;36m\][\W]\[\033[01;32m\] =>\[\033[00m\] "
SCHEME3="\[\033[01;36m\][\[\033[01;35m\]\u\[\033[01;31m\]@\[\033[01;35m\]\h \[\033[01;36m\]\W]\[\033[01;32m\]\$\[\033[00m\] "
SCHEME4="\[\033[01;36m\][\[\033[01;32m\]\u\[\033[01;31m\]@\[\033[01;32m\]\h \[\033[01;36m\]\W]\[\033[01;32m\]\$\[\033[00m\] "

#export PS1=$SCHEME3
#export PS1=$SCHEME4


#### 开启终端 256 色
if [ "$TERM" = "xterm" ]; then
    export TERM=xterm-256color
fi


#### History 历史命令相关设置
export HISTTIMEFORMAT='%F %T  '

alias h1='history 10'
alias h2='history 20'
alias h3='history 30'

# 在该命令前加上一个空格来指示history忽略这条命令
#export HISTCONTROL=ignorespace

# 让history在存储时忽略指定指令
export HISTIGNORE="pwd:ls:ll:ls –ltr:history:h1:h2:h3"


#### Alias command

# 一些常用的 ls 别名
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# 让 grep 彩色输出
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# 用超级用户打开文件
alias svi="sudo vim"
alias sgedit="sudo gedit"

# 搜索历史命令
alias hisg="history | grep"

# 搜索进程
alias psg="ps aux | grep -v grep | grep"
alias pspy="ps aux | grep -Ev 'watch|grep' | grep --color python"

# 以树形结构递归地显示目录结构
alias lsr="ls -R | grep :$ | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'"

# 对当前目录文件按大小排序
alias lss="ls | xargs -i du -sh ./{} | sort -h"

# 下载整个网站
alias websiteget="wget --random-wait -r -p -e robots=off -U mozilla"
## help: websiteget [URL]

# 显示出哪个应用程序连接到网络
alias listen="lsof -P -i -n"

# 获取公网IP地址和主机名
alias ipaddr="curl ident.me"

# 获取操作系统位数
alias osbit="getconf LONG_BIT"

# 只为有趣
alias busy="cat /dev/urandom | hexdump -C | grep 'ca fe'"

# 获取所有用户和组
alias alluser="cut -d : -f 1 /etc/passwd | sort | xargs"
alias allgroup="cut -d : -f 1 /etc/group | sort | xargs"
alias bashusers="cat /etc/passwd | grep /bin/bash | cut -d : -f 1 | sort | xargs"
alias loginusers="cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1 | sort | xargs"

# 获取占用CPU最高的前十个进程
#alias topcpu="ps aux | head -1; ps aux | grep -v PID | sort -rn -k +3 | head"
alias topcpu="ps -aux --sort -pcpu | head"

# 获取占用内存最高的前十个进程
#alias topmem="ps aux | head -1; ps aux | grep -v PID | sort -rn -k +4 | head"
alias topmem="ps -aux --sort -pmem | head"
# 默认显示 10 个，可以用 -n 指定显示的个数

# 监控进程 CPU，MEM 占用
alias watch-ps="watch -d -n1 'ps -aux --sort -pmem,-pcpu | head -n 25'"

# 监控 Python 程序 MEM 和 CPU 占用
alias watch-py="watch -cd -n1 'ps -aux --sort -pmem,-pcpu | grep -v watch | grep -v grep | grep --color python'"


#### Function command

#  创建目录并进入
mcd() { mkdir -p "$1"; cd "$1"; }

# 进入目录并列出目录下的文件
cdl() { cd "$1"; ls; }

# 文件 MD5 校验
md5check() { md5sum "$1" | grep "$2"; }
## help: md5check [file] [key]

# 统计 TCP 连接状态
tcpstat() { netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,"\t",state[key]}'; }

# 生成随机密码
genpasswd() {
    if [ $# -gt 1 ]; then
        echo "Usage: genpasswd <number>"
    elif [ $# -eq 0 ]; then
        strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 16 | tr -d '\n'; echo
    else
        strings /dev/urandom | grep -o '[[:alnum:]]' | head -n "$1" | tr -d '\n'; echo
    fi
}

# 生成一个只用左手便可输入的随机密码
lrandpw() { < /dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c${1:-'$1'};echo; }

# 解压任何类型的文档
extract() {
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)   tar xjvf $1    ;;
        *.tar.gz)    tar xzvf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xjvf $1    ;;
        *.tgz)       tar xzvf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}
## help: extract [archive file]


#### 添加用户 bin 目录到 PATH
export PATH="$HOME/bin/:$PATH"


#### Python 相关设置
export PYTHONUNBUFFERED=1  # 不缓冲标准流
# export PYTHONOPTIMIZE=1    # 优化字节码

alias chenv="source activate"  # 切换 Python 环境
alias deact="source deactivate"
alias sipy="find . -name '*.py' | xargs grep -n --color"  # 在 Python 代码中查找
alias ackpy="ack --python"
alias pytest="py.test -xvvls"


#### 引入 Docker bashrc 文件
if [ -f ~/aboutme/bash-tools/bashrc_docker ]; then  
    source ~/aboutme/bash-tools/bashrc_docker  
fi

