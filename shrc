# User shell(bash/zsh) configuration
# Author: Huoty <sudohuoty@163.com>
# Created in 2015-06-02


#### 终端 Bash 命令提示符样式
SCHEME1="\[\e[01;35m\]\u\[\e[01;31m\]\$\[\e[01;36m\][\W]\[\e[01;35m\] >>\[\e[00m\] "
SCHEME2="\[\e[01;32m\]\u\[\e[01;31m\]\$\[\e[01;36m\][\W]\[\e[01;32m\] =>\[\e[00m\] "
SCHEME3="\[\e[01;36m\][\[\e[01;35m\]\u\[\e[01;31m\]@\[\e[01;35m\]\h \[\e[01;36m\]\W]\[\e[01;35m\]\$\[\e[00m\] "
SCHEME4="\[\e[01;36m\][\[\e[01;32m\]\u\[\e[01;31m\]@\[\e[01;32m\]\h \[\e[01;36m\]\W]\[\e[01;32m\]\$\[\e[00m\] "

#export PS1=$SCHEME4


#### 开启终端 256 色
if [ "$TERM" = "xterm" ]; then
    export TERM=xterm-256color
fi


#### History 历史命令相关设置
export HISTTIMEFORMAT='%F %T  '

alias h1='history 10'
alias h2='history 20'
alias h3='history 30'

# 设置 history 记录命令的大小
export HISTSIZE=25000       # history 命令显示的条数
export HISTFILESIZE=25000   # 日志文件记录的最大条数
export SAVEHIST=10000

# 不要记录相同的命令
export HISTCONTROL=ignoredups

# 让 history 在存储时忽略指定指令
export HISTIGNORE="cd:cd ..:exit:pwd:ls:ll:l:ls –ltr:history:h1:h2:h3:reset:clear"


#### Alias command

# 将当前用户的命令别名应用到 sudo 启动的程序
alias sudo='sudo '

# 一些常用的 ls 别名
# alias ls='ls --color=auto'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alF'
alias llh='ls -l --si'
alias lq='ls -Q'
alias lr='ls -R'
alias lrs='ls -lrS'
alias lrt='ls -lrt'
alias lrta='ls -lrtA'
alias lrth='ls -lrth --si'
alias lrtha='ls -lrthA --si'

# 以树形结构递归地显示目录结构
alias lsr="ls -R | grep :$ | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'"

# 对当前目录文件按大小排序（仅 Linux 环境可用）
alias lss="ls | xargs -i du -sh ./{} | sort -h"

# 让 grep 彩色输出
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# 部分命名命令显示详细的执行过程
alias chmod='chmod -v'
alias chown='chown -v'

# 查看命令位置
alias type="type -a"
alias which="which -a"

# 搜索历史命令
alias hisg="history | grep"
alias gh="history | grep"

# Emacs 命令简化
alias em="emacs"

# 用超级用户打开文件
alias svi="sudo vim"
alias sem="sudo emacs"
alias sgedit="sudo gedit"

# 搜索进程
alias psg="ps aux | grep -v grep | grep -i"
alias gp="ps aux | grep -v grep | grep -i"

# 限制 ping 的输出次数
alias ping="ping -c 10"

# Wget 默认断点下载
alias wget="wget -c"

# 下载整个网站
alias websiteget="wget --random-wait -r -p -e robots=off -U mozilla"
## help: websiteget [URL]

# 显示出哪个应用程序连接到网络
alias listen="lsof -P -i -n"

# 获取当前时间戳
alias timestamp="date +%s"

# 获取公网 IP 地址
# alias ipaddr="curl ip.sb"
# alias ipaddr="curl ident.me"
# alias ipaddr="curl ifconfig.me"
alias ipaddr="curl cip.cc"

# 获取操作系统位数
alias osbit="getconf LONG_BIT"

# 只为有趣
alias busy="cat /dev/urandom | hexdump -C | grep 'ca fe'"

# 获取所有用户和组
alias alluser="cut -d : -f 1 /etc/passwd | sort | xargs"
alias allgroup="cut -d : -f 1 /etc/group | sort | xargs"
alias bashusers="cat /etc/passwd | grep /bin/bash | cut -d : -f 1 | sort | xargs"
alias loginusers="cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1 | sort | xargs"

# 获取占用CPU最高的前十个进程
alias topcpu="ps aux | grep -v PID | sort -nrk +3 | head"
#alias topcpu="ps -aux --sort -pcpu | head"

# 获取占用内存最高的前十个进程
alias topmem="ps aux | grep -v PID | sort -nrk +4 | head"
#alias topmem="ps -aux --sort -pmem | head"

# 监控进程 CPU，MEM 占用，Mac 不兼容
alias watch-ps="watch -d -n1 'ps ax -o user,pid,ppid,pgid,ni,tty,stat,pcpu,pmem,start,time,cmd --sort -pcpu,-pmem | head -25'"

# 监控最占用的 CPU 的进程，Mac 兼容
alias watch-cpu="watch -d -n1 'ps aux | grep -v PID | sort -nrk +3 | head -25'"

# 监控最占用的 MEM 的进程，Mac 兼容
alias watch-mem="watch -d -n1 'ps aux | grep -v PID | sort -nrk +4 | head -25'"

# 产生十六进制随机数字符串
alias hexstr="openssl rand -hex"
# help: hexstr 16

# 用于查看日志
alias tf='tail -F'

# 只查看挂载的驱动器，仅支持 Linux 平台
alias mnt='mount | grep -E ^/dev | column -t'

# 使用 rsync 代替 cp 拷贝文件
alias cpv='rsync -aHt --progress'

# 转换 Windows 新建文件到 unix 可识别的格式
alias wintext2unix='iconv -f UTF-16LE -t UTF-8'

# Tmux 快捷命令
alias tmuxat='tmux attach-session -t'


#### Function command

# 创建目录并进入
mcd() { mkdir -p "$1"; cd "$1"; }

# 进入目录并列出目录下的文件
cdl() { cd "$1"; ls; }

cl() {
    DIR="$*";
    if [ $# -lt 1 ]; then
        DIR=$HOME;
    fi;
    builtin cd "${DIR}" && ls -F
}

# 清理屏幕输出
cls() {
    if [[ "$TERM" =~ "screen".* && -n "$TMUX" ]]; then
        reset; tmux clear-history
    else
        reset; clear
    fi
}

# 如果是 Cygwin 环境则尝试使用 procps 列出进程
if [[ "$OSTYPE" == "cygwin"* ]]; then
    pps() {
        procps -wwFAH
    }
fi

# 文件 MD5 校验
md5check() { md5sum "$1" | grep "$2"; }
## help: md5check [file] [key]

# 统计 TCP 连接状态
tcpstat() { netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,"\t",state[key]}'; }

# 粗略统计系统所有进程占用的总内存
statmem() { ps aux | awk '{mem += $6} END {print mem/1024/1024}'; }

# 查看指定用户的进程
psu() {
    if [[ -n $1 ]]; then
        user=$1
    else
        user=$(whoami)
    fi
    ps -u $user -o \
        user,pid,ppid,pgid,sid,ni,tty,stat,pcpu,pmem,vsz,rss,start,time,cmd \
        --sort -pcpu,-pmem
}

# 查看进程打开的文件描述符
pfds() { ls -l /proc/$1/fd; }

# 简单的终端脚本选择器
pick-color() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

# 多次运行同一个命令
multi-run() {
    times=$1
    shift
    for i in `seq $times`; do
        $@
    done
}

# 生成随机密码
genpasswd() {
    if [ $# -gt 1 ]; then
        echo "Usage: genpasswd <number>"
    elif [ $# -eq 0 ]; then
        strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 16 | tr -d '\n'; echo
    else
        strings /dev/urandom | grep -o '[[:alnum:]]' | head -n "$1" | tr -d '\n'; echo
    fi
}

alias genpasswd2="openssl rand -base64 20"

# 生成一个只用左手便可输入的随机密码
lrandpw() { < /dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c${1:-'$1'};echo; }

# 解压任何类型的文档
extract() {
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)   tar xjvf $1    ;;
        *.tar.gz)    tar xzvf $1    ;;
        *.tar.xz)    tar xJvf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xjvf $1    ;;
        *.tgz)       tar xzvf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}
## help: extract [archive file]

# 查看 CSV 文件
function pretty-csv() {
    column -t -s, -n "$@" | less -F -S -X -K
}

function csview() {
    if [ -f $1 ]; then
        cat $1 | pretty-csv
    else
        pretty-csv "$@"
    fi
}

# 添加 PATH 环境变量值
function add-path-env() {
    for value in $*; do
        case ":${PATH}:" in
            *:"${value}":*)
                ;;
            *)
                export PATH="$value:$PATH"
                ;;
        esac
    done
}


#### 添加用户 PATH 环境
add-path-env "$HOME/.local/bin"


#### 设置 CDPATH 环境变量
export CDPATH="$HOME:$HOME/aboutme:$HOME/Aboutme:$HOME/work:$HOME/Work"


#### 使用 trash 而不是 rm 命令
# 安装：
#   Ubuntu: apt-get install trash-cli
#   Mac OS: brew install trash
if [ -x "$(command -v trash)" ]; then
    if [ ! -x "$(command -v grm)" ]; then
        alias grm=/bin/rm
    fi
    alias rm='echo "This is not the command you are looking for."; false'
else
    alias rm="rm -vi"
fi


#### 为了安全，拷贝或移动文件时进行确认并输出详细信息
alias mv='mv -vi'
alias cp='cp -vi'


#### 如果系统中有 vim，则使用其作为默认的编辑器
if [ -x "$(command -v vim)" ]; then
    export EDITOR='vim'
fi


#### 如果可能，则使用更加高级的命令
if [ -x "$(command -v bat)" ]; then
    alias cat="bat -pP"
fi
if [ -x "$(command -v exa)" ]; then
    alias ll="exa -al"
fi


#### 包含 z.sh 脚本，实现目录快速跳转
if [ -f ~/.z.sh ]; then
    source ~/.z.sh
fi


#### Git 相关设置
alias cg='cd `git rev-parse --show-toplevel`'  # 回到项目的顶级目录


#### Python 相关设置
export PYTHONIOENCODING="UTF-8"  # 标准流的编码
export PYTHONUNBUFFERED=1        # 不缓冲标准流
# export PYTHONOPTIMIZE=1    # 优化字节码
export PIP_DEFAULT_TIMEOUT=60    # Pip 的超时时间

alias greppy="find . -name '*.py' | xargs grep -n --color"  # 在 Python 代码中查找
alias ackpy="ack --python"
alias pytest="py.test -xvvls"

# 启动一个简单的 HTTP 服务
if [ -x "$(command -v python)" ]; then
    PYVERSION=$(python -c "import sys; print(sys.version_info[0])")
    if [ $PYVERSION -gt 2 ]; then
        alias simplehttpserver="python -m http.server"  # python3
    else
        alias simplehttpserver="python -m SimpleHTTPServer"
    fi
fi

# 清理 Python 编译产生的二进制文件
function pyclean() {
    ZSH_PYCLEAN_PLACES=${*:-'.'}
    find ${ZSH_PYCLEAN_PLACES} -type f -name "*.py[co]" -delete
    find ${ZSH_PYCLEAN_PLACES} -type d -name "__pycache__" -delete
}


#### Cheat 工具相关设置
export CHEAT_PATH="$HOME/.local/cheat:/usr/local/share/cheat"
export CHEAT_COLORS=true
CHEAT_HIGHLIGHT=green


#### Docker 相关设置
if [ -x "$(command -v docker)" ]; then
    alias docker-exec="docker exec -ti --env COLUMNS=$(tput cols) --env LINES=$(tput lines)"
    alias docker-clear="docker ps -aq | xargs docker rm"
    alias docker-killall="docker ps -q | xargs docker kill"
    alias docker-pid="docker inspect --format '{{.State.Pid}}'"
    alias docker-ip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

    docker-bash() { docker run -it $1 /bin/bash; }
fi


#### 平台相关设置
case "$(uname -s)" in
    Darwin)  # Mac OS X
        # [[ "$OSTYPE" == "darwin"* ]]
        alias sourcetree="open -a SourceTree"

        # 用于微信多开
        alias wechat="nohup /Applications/WeChat.app/Contents/MacOS/WeChat > /dev/null 2>&1 &"
        ;;
    CYGWIN*|MINGW32*|MSYS*|MINGW*)  # MS Windows
        # 将常用 Windows 命令输出转换为 utf8，解决 Windows 自有命令显示乱码问题
        _runiconv () { _cmd=$1; shift; $_cmd $* 2>&1 | iconv -f gbk -t UTF-8; }
        alias where='_runiconv where'
        alias ifconfig='_runiconv ipconfig'
        alias netstat='_runiconv netstat'
        alias tasklist='_runiconv tasklist'
        alias tracert='_runiconv tracert'
        alias route='_runiconv route'
        alias ping='_runiconv ping'
        alias tree='_runiconv tree'
        ;;
    Linux)  # Linux
        ;;
    *)  # Other OS
        ;;
esac

# Zsh 专有配置
if [[ $SHELL == *'zsh' ]]; then
    # 消除历史记录中的重复条目
    setopt hist_ignore_dups

    # 忽略已空格开始的命令，不添加到历史命令记录中
    setopt hist_ignore_space

    # 一些简单的命令不记录入历史命令中
    HISTORY_IGNORE='(cd|exit|pwd|history|h[123]|reset|clear|[bf]g *|cd ..|l[alsh]#( *)#|less *|vim# *)'

    # 会话间不共享历史命令
    unsetopt inc_append_history
    unsetopt share_history

    # 让 history 命令输出执行的时间
    alias h1='history -i -10'
    alias h2='history -i -20'
    alias h3='history -i -30'
    alias gh='history -i | grep'
    alias hisg='history -i | grep'
fi
